/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as HomeRouteImport } from './routes/home'
import { Route as FaucetRouteImport } from './routes/faucet'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as PDisplayLinkRouteImport } from './routes/p.$displayLink'
import { Route as IDisplayLinkRouteImport } from './routes/i.$displayLink'
import { Route as CDisplayLinkRouteImport } from './routes/c.$displayLink'
import { Route as userAuthUserSignInRouteImport } from './routes/(userAuth)/user-sign-in'
import { Route as authSignUpRouteImport } from './routes/(auth)/sign-up'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as authOtpRouteImport } from './routes/(auth)/otp'
import { Route as AuthenticatedWalletsIndexRouteImport } from './routes/_authenticated/wallets/index'
import { Route as AuthenticatedPostsIndexRouteImport } from './routes/_authenticated/posts/index'
import { Route as AuthenticatedPaymentsIndexRouteImport } from './routes/_authenticated/payments/index'
import { Route as AuthenticatedNetworksIndexRouteImport } from './routes/_authenticated/networks/index'
import { Route as AuthenticatedInvoicesIndexRouteImport } from './routes/_authenticated/invoices/index'
import { Route as AuthenticatedContentIndexRouteImport } from './routes/_authenticated/content/index'

const errors503LazyRouteImport = createFileRoute('/(errors)/503')()
const errors500LazyRouteImport = createFileRoute('/(errors)/500')()
const errors404LazyRouteImport = createFileRoute('/(errors)/404')()
const errors403LazyRouteImport = createFileRoute('/(errors)/403')()
const errors401LazyRouteImport = createFileRoute('/(errors)/401')()
const authSignIn2LazyRouteImport = createFileRoute('/(auth)/sign-in-2')()
const authForgotPasswordLazyRouteImport = createFileRoute(
  '/(auth)/forgot-password',
)()
const AuthenticatedSettingsRouteLazyRouteImport = createFileRoute(
  '/_authenticated/settings',
)()
const AuthenticatedUsersIndexLazyRouteImport = createFileRoute(
  '/_authenticated/users/',
)()
const AuthenticatedTasksIndexLazyRouteImport = createFileRoute(
  '/_authenticated/tasks/',
)()
const AuthenticatedSettingsIndexLazyRouteImport = createFileRoute(
  '/_authenticated/settings/',
)()
const AuthenticatedHelpCenterIndexLazyRouteImport = createFileRoute(
  '/_authenticated/help-center/',
)()
const AuthenticatedChatsIndexLazyRouteImport = createFileRoute(
  '/_authenticated/chats/',
)()
const AuthenticatedAppsIndexLazyRouteImport = createFileRoute(
  '/_authenticated/apps/',
)()
const AuthenticatedSettingsNotificationsLazyRouteImport = createFileRoute(
  '/_authenticated/settings/notifications',
)()
const AuthenticatedSettingsDisplayLazyRouteImport = createFileRoute(
  '/_authenticated/settings/display',
)()
const AuthenticatedSettingsAppearanceLazyRouteImport = createFileRoute(
  '/_authenticated/settings/appearance',
)()
const AuthenticatedSettingsAccountLazyRouteImport = createFileRoute(
  '/_authenticated/settings/account',
)()

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/home.lazy').then((d) => d.Route))
const FaucetRoute = FaucetRouteImport.update({
  id: '/faucet',
  path: '/faucet',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/faucet.lazy').then((d) => d.Route))
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const errors503LazyRoute = errors503LazyRouteImport
  .update({
    id: '/(errors)/503',
    path: '/503',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/503.lazy').then((d) => d.Route))
const errors500LazyRoute = errors500LazyRouteImport
  .update({
    id: '/(errors)/500',
    path: '/500',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/500.lazy').then((d) => d.Route))
const errors404LazyRoute = errors404LazyRouteImport
  .update({
    id: '/(errors)/404',
    path: '/404',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/404.lazy').then((d) => d.Route))
const errors403LazyRoute = errors403LazyRouteImport
  .update({
    id: '/(errors)/403',
    path: '/403',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/403.lazy').then((d) => d.Route))
const errors401LazyRoute = errors401LazyRouteImport
  .update({
    id: '/(errors)/401',
    path: '/401',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/401.lazy').then((d) => d.Route))
const authSignIn2LazyRoute = authSignIn2LazyRouteImport
  .update({
    id: '/(auth)/sign-in-2',
    path: '/sign-in-2',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(auth)/sign-in-2.lazy').then((d) => d.Route))
const authForgotPasswordLazyRoute = authForgotPasswordLazyRouteImport
  .update({
    id: '/(auth)/forgot-password',
    path: '/forgot-password',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() =>
    import('./routes/(auth)/forgot-password.lazy').then((d) => d.Route),
  )
const AuthenticatedSettingsRouteLazyRoute =
  AuthenticatedSettingsRouteLazyRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/route.lazy').then((d) => d.Route),
  )
const PDisplayLinkRoute = PDisplayLinkRouteImport.update({
  id: '/p/$displayLink',
  path: '/p/$displayLink',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/p.$displayLink.lazy').then((d) => d.Route),
)
const IDisplayLinkRoute = IDisplayLinkRouteImport.update({
  id: '/i/$displayLink',
  path: '/i/$displayLink',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/i.$displayLink.lazy').then((d) => d.Route),
)
const CDisplayLinkRoute = CDisplayLinkRouteImport.update({
  id: '/c/$displayLink',
  path: '/c/$displayLink',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/c.$displayLink.lazy').then((d) => d.Route),
)
const userAuthUserSignInRoute = userAuthUserSignInRouteImport
  .update({
    id: '/(userAuth)/user-sign-in',
    path: '/user-sign-in',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() =>
    import('./routes/(userAuth)/user-sign-in.lazy').then((d) => d.Route),
  )
const authSignUpRoute = authSignUpRouteImport
  .update({
    id: '/(auth)/sign-up',
    path: '/sign-up',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(auth)/sign-up.lazy').then((d) => d.Route))
const authSignInRoute = authSignInRouteImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const authOtpRoute = authOtpRouteImport.update({
  id: '/(auth)/otp',
  path: '/otp',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedUsersIndexLazyRoute =
  AuthenticatedUsersIndexLazyRouteImport.update({
    id: '/users/',
    path: '/users/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/users/index.lazy').then((d) => d.Route),
  )
const AuthenticatedTasksIndexLazyRoute =
  AuthenticatedTasksIndexLazyRouteImport.update({
    id: '/tasks/',
    path: '/tasks/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/tasks/index.lazy').then((d) => d.Route),
  )
const AuthenticatedSettingsIndexLazyRoute =
  AuthenticatedSettingsIndexLazyRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedSettingsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/index.lazy').then((d) => d.Route),
  )
const AuthenticatedHelpCenterIndexLazyRoute =
  AuthenticatedHelpCenterIndexLazyRouteImport.update({
    id: '/help-center/',
    path: '/help-center/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/help-center/index.lazy').then(
      (d) => d.Route,
    ),
  )
const AuthenticatedChatsIndexLazyRoute =
  AuthenticatedChatsIndexLazyRouteImport.update({
    id: '/chats/',
    path: '/chats/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/chats/index.lazy').then((d) => d.Route),
  )
const AuthenticatedAppsIndexLazyRoute =
  AuthenticatedAppsIndexLazyRouteImport.update({
    id: '/apps/',
    path: '/apps/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/apps/index.lazy').then((d) => d.Route),
  )
const AuthenticatedWalletsIndexRoute =
  AuthenticatedWalletsIndexRouteImport.update({
    id: '/wallets/',
    path: '/wallets/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedPostsIndexRoute = AuthenticatedPostsIndexRouteImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/posts/index.lazy').then((d) => d.Route),
)
const AuthenticatedPaymentsIndexRoute =
  AuthenticatedPaymentsIndexRouteImport.update({
    id: '/payments/',
    path: '/payments/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedNetworksIndexRoute =
  AuthenticatedNetworksIndexRouteImport.update({
    id: '/networks/',
    path: '/networks/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedInvoicesIndexRoute =
  AuthenticatedInvoicesIndexRouteImport.update({
    id: '/invoices/',
    path: '/invoices/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedContentIndexRoute =
  AuthenticatedContentIndexRouteImport.update({
    id: '/content/',
    path: '/content/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/content/index.lazy').then((d) => d.Route),
  )
const AuthenticatedSettingsNotificationsLazyRoute =
  AuthenticatedSettingsNotificationsLazyRouteImport.update({
    id: '/notifications',
    path: '/notifications',
    getParentRoute: () => AuthenticatedSettingsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/notifications.lazy').then(
      (d) => d.Route,
    ),
  )
const AuthenticatedSettingsDisplayLazyRoute =
  AuthenticatedSettingsDisplayLazyRouteImport.update({
    id: '/display',
    path: '/display',
    getParentRoute: () => AuthenticatedSettingsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/display.lazy').then(
      (d) => d.Route,
    ),
  )
const AuthenticatedSettingsAppearanceLazyRoute =
  AuthenticatedSettingsAppearanceLazyRouteImport.update({
    id: '/appearance',
    path: '/appearance',
    getParentRoute: () => AuthenticatedSettingsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/appearance.lazy').then(
      (d) => d.Route,
    ),
  )
const AuthenticatedSettingsAccountLazyRoute =
  AuthenticatedSettingsAccountLazyRouteImport.update({
    id: '/account',
    path: '/account',
    getParentRoute: () => AuthenticatedSettingsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/account.lazy').then(
      (d) => d.Route,
    ),
  )

export interface FileRoutesByFullPath {
  '/faucet': typeof FaucetRoute
  '/home': typeof HomeRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/otp': typeof authOtpRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/user-sign-in': typeof userAuthUserSignInRoute
  '/c/$displayLink': typeof CDisplayLinkRoute
  '/i/$displayLink': typeof IDisplayLinkRoute
  '/p/$displayLink': typeof PDisplayLinkRoute
  '/settings': typeof AuthenticatedSettingsRouteLazyRouteWithChildren
  '/forgot-password': typeof authForgotPasswordLazyRoute
  '/sign-in-2': typeof authSignIn2LazyRoute
  '/401': typeof errors401LazyRoute
  '/403': typeof errors403LazyRoute
  '/404': typeof errors404LazyRoute
  '/500': typeof errors500LazyRoute
  '/503': typeof errors503LazyRoute
  '/': typeof AuthenticatedIndexRoute
  '/settings/account': typeof AuthenticatedSettingsAccountLazyRoute
  '/settings/appearance': typeof AuthenticatedSettingsAppearanceLazyRoute
  '/settings/display': typeof AuthenticatedSettingsDisplayLazyRoute
  '/settings/notifications': typeof AuthenticatedSettingsNotificationsLazyRoute
  '/content': typeof AuthenticatedContentIndexRoute
  '/invoices': typeof AuthenticatedInvoicesIndexRoute
  '/networks': typeof AuthenticatedNetworksIndexRoute
  '/payments': typeof AuthenticatedPaymentsIndexRoute
  '/posts': typeof AuthenticatedPostsIndexRoute
  '/wallets': typeof AuthenticatedWalletsIndexRoute
  '/apps': typeof AuthenticatedAppsIndexLazyRoute
  '/chats': typeof AuthenticatedChatsIndexLazyRoute
  '/help-center': typeof AuthenticatedHelpCenterIndexLazyRoute
  '/settings/': typeof AuthenticatedSettingsIndexLazyRoute
  '/tasks': typeof AuthenticatedTasksIndexLazyRoute
  '/users': typeof AuthenticatedUsersIndexLazyRoute
}
export interface FileRoutesByTo {
  '/faucet': typeof FaucetRoute
  '/home': typeof HomeRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/otp': typeof authOtpRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/user-sign-in': typeof userAuthUserSignInRoute
  '/c/$displayLink': typeof CDisplayLinkRoute
  '/i/$displayLink': typeof IDisplayLinkRoute
  '/p/$displayLink': typeof PDisplayLinkRoute
  '/forgot-password': typeof authForgotPasswordLazyRoute
  '/sign-in-2': typeof authSignIn2LazyRoute
  '/401': typeof errors401LazyRoute
  '/403': typeof errors403LazyRoute
  '/404': typeof errors404LazyRoute
  '/500': typeof errors500LazyRoute
  '/503': typeof errors503LazyRoute
  '/': typeof AuthenticatedIndexRoute
  '/settings/account': typeof AuthenticatedSettingsAccountLazyRoute
  '/settings/appearance': typeof AuthenticatedSettingsAppearanceLazyRoute
  '/settings/display': typeof AuthenticatedSettingsDisplayLazyRoute
  '/settings/notifications': typeof AuthenticatedSettingsNotificationsLazyRoute
  '/content': typeof AuthenticatedContentIndexRoute
  '/invoices': typeof AuthenticatedInvoicesIndexRoute
  '/networks': typeof AuthenticatedNetworksIndexRoute
  '/payments': typeof AuthenticatedPaymentsIndexRoute
  '/posts': typeof AuthenticatedPostsIndexRoute
  '/wallets': typeof AuthenticatedWalletsIndexRoute
  '/apps': typeof AuthenticatedAppsIndexLazyRoute
  '/chats': typeof AuthenticatedChatsIndexLazyRoute
  '/help-center': typeof AuthenticatedHelpCenterIndexLazyRoute
  '/settings': typeof AuthenticatedSettingsIndexLazyRoute
  '/tasks': typeof AuthenticatedTasksIndexLazyRoute
  '/users': typeof AuthenticatedUsersIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/faucet': typeof FaucetRoute
  '/home': typeof HomeRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/(auth)/otp': typeof authOtpRoute
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
  '/(userAuth)/user-sign-in': typeof userAuthUserSignInRoute
  '/c/$displayLink': typeof CDisplayLinkRoute
  '/i/$displayLink': typeof IDisplayLinkRoute
  '/p/$displayLink': typeof PDisplayLinkRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRouteLazyRouteWithChildren
  '/(auth)/forgot-password': typeof authForgotPasswordLazyRoute
  '/(auth)/sign-in-2': typeof authSignIn2LazyRoute
  '/(errors)/401': typeof errors401LazyRoute
  '/(errors)/403': typeof errors403LazyRoute
  '/(errors)/404': typeof errors404LazyRoute
  '/(errors)/500': typeof errors500LazyRoute
  '/(errors)/503': typeof errors503LazyRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/settings/account': typeof AuthenticatedSettingsAccountLazyRoute
  '/_authenticated/settings/appearance': typeof AuthenticatedSettingsAppearanceLazyRoute
  '/_authenticated/settings/display': typeof AuthenticatedSettingsDisplayLazyRoute
  '/_authenticated/settings/notifications': typeof AuthenticatedSettingsNotificationsLazyRoute
  '/_authenticated/content/': typeof AuthenticatedContentIndexRoute
  '/_authenticated/invoices/': typeof AuthenticatedInvoicesIndexRoute
  '/_authenticated/networks/': typeof AuthenticatedNetworksIndexRoute
  '/_authenticated/payments/': typeof AuthenticatedPaymentsIndexRoute
  '/_authenticated/posts/': typeof AuthenticatedPostsIndexRoute
  '/_authenticated/wallets/': typeof AuthenticatedWalletsIndexRoute
  '/_authenticated/apps/': typeof AuthenticatedAppsIndexLazyRoute
  '/_authenticated/chats/': typeof AuthenticatedChatsIndexLazyRoute
  '/_authenticated/help-center/': typeof AuthenticatedHelpCenterIndexLazyRoute
  '/_authenticated/settings/': typeof AuthenticatedSettingsIndexLazyRoute
  '/_authenticated/tasks/': typeof AuthenticatedTasksIndexLazyRoute
  '/_authenticated/users/': typeof AuthenticatedUsersIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/faucet'
    | '/home'
    | '/privacy'
    | '/terms'
    | '/otp'
    | '/sign-in'
    | '/sign-up'
    | '/user-sign-in'
    | '/c/$displayLink'
    | '/i/$displayLink'
    | '/p/$displayLink'
    | '/settings'
    | '/forgot-password'
    | '/sign-in-2'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/'
    | '/settings/account'
    | '/settings/appearance'
    | '/settings/display'
    | '/settings/notifications'
    | '/content'
    | '/invoices'
    | '/networks'
    | '/payments'
    | '/posts'
    | '/wallets'
    | '/apps'
    | '/chats'
    | '/help-center'
    | '/settings/'
    | '/tasks'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/faucet'
    | '/home'
    | '/privacy'
    | '/terms'
    | '/otp'
    | '/sign-in'
    | '/sign-up'
    | '/user-sign-in'
    | '/c/$displayLink'
    | '/i/$displayLink'
    | '/p/$displayLink'
    | '/forgot-password'
    | '/sign-in-2'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/'
    | '/settings/account'
    | '/settings/appearance'
    | '/settings/display'
    | '/settings/notifications'
    | '/content'
    | '/invoices'
    | '/networks'
    | '/payments'
    | '/posts'
    | '/wallets'
    | '/apps'
    | '/chats'
    | '/help-center'
    | '/settings'
    | '/tasks'
    | '/users'
  id:
    | '__root__'
    | '/_authenticated'
    | '/faucet'
    | '/home'
    | '/privacy'
    | '/terms'
    | '/(auth)/otp'
    | '/(auth)/sign-in'
    | '/(auth)/sign-up'
    | '/(userAuth)/user-sign-in'
    | '/c/$displayLink'
    | '/i/$displayLink'
    | '/p/$displayLink'
    | '/_authenticated/settings'
    | '/(auth)/forgot-password'
    | '/(auth)/sign-in-2'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/_authenticated/'
    | '/_authenticated/settings/account'
    | '/_authenticated/settings/appearance'
    | '/_authenticated/settings/display'
    | '/_authenticated/settings/notifications'
    | '/_authenticated/content/'
    | '/_authenticated/invoices/'
    | '/_authenticated/networks/'
    | '/_authenticated/payments/'
    | '/_authenticated/posts/'
    | '/_authenticated/wallets/'
    | '/_authenticated/apps/'
    | '/_authenticated/chats/'
    | '/_authenticated/help-center/'
    | '/_authenticated/settings/'
    | '/_authenticated/tasks/'
    | '/_authenticated/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  FaucetRoute: typeof FaucetRoute
  HomeRoute: typeof HomeRoute
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
  authOtpRoute: typeof authOtpRoute
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
  userAuthUserSignInRoute: typeof userAuthUserSignInRoute
  CDisplayLinkRoute: typeof CDisplayLinkRoute
  IDisplayLinkRoute: typeof IDisplayLinkRoute
  PDisplayLinkRoute: typeof PDisplayLinkRoute
  authForgotPasswordLazyRoute: typeof authForgotPasswordLazyRoute
  authSignIn2LazyRoute: typeof authSignIn2LazyRoute
  errors401LazyRoute: typeof errors401LazyRoute
  errors403LazyRoute: typeof errors403LazyRoute
  errors404LazyRoute: typeof errors404LazyRoute
  errors500LazyRoute: typeof errors500LazyRoute
  errors503LazyRoute: typeof errors503LazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/faucet': {
      id: '/faucet'
      path: '/faucet'
      fullPath: '/faucet'
      preLoaderRoute: typeof FaucetRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-in-2': {
      id: '/(auth)/sign-in-2'
      path: '/sign-in-2'
      fullPath: '/sign-in-2'
      preLoaderRoute: typeof authSignIn2LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteLazyRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/p/$displayLink': {
      id: '/p/$displayLink'
      path: '/p/$displayLink'
      fullPath: '/p/$displayLink'
      preLoaderRoute: typeof PDisplayLinkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/i/$displayLink': {
      id: '/i/$displayLink'
      path: '/i/$displayLink'
      fullPath: '/i/$displayLink'
      preLoaderRoute: typeof IDisplayLinkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/c/$displayLink': {
      id: '/c/$displayLink'
      path: '/c/$displayLink'
      fullPath: '/c/$displayLink'
      preLoaderRoute: typeof CDisplayLinkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(userAuth)/user-sign-in': {
      id: '/(userAuth)/user-sign-in'
      path: '/user-sign-in'
      fullPath: '/user-sign-in'
      preLoaderRoute: typeof userAuthUserSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/otp': {
      id: '/(auth)/otp'
      path: '/otp'
      fullPath: '/otp'
      preLoaderRoute: typeof authOtpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/users/': {
      id: '/_authenticated/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersIndexLazyRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/tasks/': {
      id: '/_authenticated/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof AuthenticatedTasksIndexLazyRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/settings/': {
      id: '/_authenticated/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof AuthenticatedSettingsIndexLazyRouteImport
      parentRoute: typeof AuthenticatedSettingsRouteLazyRoute
    }
    '/_authenticated/help-center/': {
      id: '/_authenticated/help-center/'
      path: '/help-center'
      fullPath: '/help-center'
      preLoaderRoute: typeof AuthenticatedHelpCenterIndexLazyRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/chats/': {
      id: '/_authenticated/chats/'
      path: '/chats'
      fullPath: '/chats'
      preLoaderRoute: typeof AuthenticatedChatsIndexLazyRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/apps/': {
      id: '/_authenticated/apps/'
      path: '/apps'
      fullPath: '/apps'
      preLoaderRoute: typeof AuthenticatedAppsIndexLazyRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/wallets/': {
      id: '/_authenticated/wallets/'
      path: '/wallets'
      fullPath: '/wallets'
      preLoaderRoute: typeof AuthenticatedWalletsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/posts/': {
      id: '/_authenticated/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof AuthenticatedPostsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/payments/': {
      id: '/_authenticated/payments/'
      path: '/payments'
      fullPath: '/payments'
      preLoaderRoute: typeof AuthenticatedPaymentsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/networks/': {
      id: '/_authenticated/networks/'
      path: '/networks'
      fullPath: '/networks'
      preLoaderRoute: typeof AuthenticatedNetworksIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/invoices/': {
      id: '/_authenticated/invoices/'
      path: '/invoices'
      fullPath: '/invoices'
      preLoaderRoute: typeof AuthenticatedInvoicesIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/content/': {
      id: '/_authenticated/content/'
      path: '/content'
      fullPath: '/content'
      preLoaderRoute: typeof AuthenticatedContentIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/settings/notifications': {
      id: '/_authenticated/settings/notifications'
      path: '/notifications'
      fullPath: '/settings/notifications'
      preLoaderRoute: typeof AuthenticatedSettingsNotificationsLazyRouteImport
      parentRoute: typeof AuthenticatedSettingsRouteLazyRoute
    }
    '/_authenticated/settings/display': {
      id: '/_authenticated/settings/display'
      path: '/display'
      fullPath: '/settings/display'
      preLoaderRoute: typeof AuthenticatedSettingsDisplayLazyRouteImport
      parentRoute: typeof AuthenticatedSettingsRouteLazyRoute
    }
    '/_authenticated/settings/appearance': {
      id: '/_authenticated/settings/appearance'
      path: '/appearance'
      fullPath: '/settings/appearance'
      preLoaderRoute: typeof AuthenticatedSettingsAppearanceLazyRouteImport
      parentRoute: typeof AuthenticatedSettingsRouteLazyRoute
    }
    '/_authenticated/settings/account': {
      id: '/_authenticated/settings/account'
      path: '/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof AuthenticatedSettingsAccountLazyRouteImport
      parentRoute: typeof AuthenticatedSettingsRouteLazyRoute
    }
  }
}

interface AuthenticatedSettingsRouteLazyRouteChildren {
  AuthenticatedSettingsAccountLazyRoute: typeof AuthenticatedSettingsAccountLazyRoute
  AuthenticatedSettingsAppearanceLazyRoute: typeof AuthenticatedSettingsAppearanceLazyRoute
  AuthenticatedSettingsDisplayLazyRoute: typeof AuthenticatedSettingsDisplayLazyRoute
  AuthenticatedSettingsNotificationsLazyRoute: typeof AuthenticatedSettingsNotificationsLazyRoute
  AuthenticatedSettingsIndexLazyRoute: typeof AuthenticatedSettingsIndexLazyRoute
}

const AuthenticatedSettingsRouteLazyRouteChildren: AuthenticatedSettingsRouteLazyRouteChildren =
  {
    AuthenticatedSettingsAccountLazyRoute:
      AuthenticatedSettingsAccountLazyRoute,
    AuthenticatedSettingsAppearanceLazyRoute:
      AuthenticatedSettingsAppearanceLazyRoute,
    AuthenticatedSettingsDisplayLazyRoute:
      AuthenticatedSettingsDisplayLazyRoute,
    AuthenticatedSettingsNotificationsLazyRoute:
      AuthenticatedSettingsNotificationsLazyRoute,
    AuthenticatedSettingsIndexLazyRoute: AuthenticatedSettingsIndexLazyRoute,
  }

const AuthenticatedSettingsRouteLazyRouteWithChildren =
  AuthenticatedSettingsRouteLazyRoute._addFileChildren(
    AuthenticatedSettingsRouteLazyRouteChildren,
  )

interface AuthenticatedRouteRouteChildren {
  AuthenticatedSettingsRouteLazyRoute: typeof AuthenticatedSettingsRouteLazyRouteWithChildren
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedContentIndexRoute: typeof AuthenticatedContentIndexRoute
  AuthenticatedInvoicesIndexRoute: typeof AuthenticatedInvoicesIndexRoute
  AuthenticatedNetworksIndexRoute: typeof AuthenticatedNetworksIndexRoute
  AuthenticatedPaymentsIndexRoute: typeof AuthenticatedPaymentsIndexRoute
  AuthenticatedPostsIndexRoute: typeof AuthenticatedPostsIndexRoute
  AuthenticatedWalletsIndexRoute: typeof AuthenticatedWalletsIndexRoute
  AuthenticatedAppsIndexLazyRoute: typeof AuthenticatedAppsIndexLazyRoute
  AuthenticatedChatsIndexLazyRoute: typeof AuthenticatedChatsIndexLazyRoute
  AuthenticatedHelpCenterIndexLazyRoute: typeof AuthenticatedHelpCenterIndexLazyRoute
  AuthenticatedTasksIndexLazyRoute: typeof AuthenticatedTasksIndexLazyRoute
  AuthenticatedUsersIndexLazyRoute: typeof AuthenticatedUsersIndexLazyRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedSettingsRouteLazyRoute:
    AuthenticatedSettingsRouteLazyRouteWithChildren,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedContentIndexRoute: AuthenticatedContentIndexRoute,
  AuthenticatedInvoicesIndexRoute: AuthenticatedInvoicesIndexRoute,
  AuthenticatedNetworksIndexRoute: AuthenticatedNetworksIndexRoute,
  AuthenticatedPaymentsIndexRoute: AuthenticatedPaymentsIndexRoute,
  AuthenticatedPostsIndexRoute: AuthenticatedPostsIndexRoute,
  AuthenticatedWalletsIndexRoute: AuthenticatedWalletsIndexRoute,
  AuthenticatedAppsIndexLazyRoute: AuthenticatedAppsIndexLazyRoute,
  AuthenticatedChatsIndexLazyRoute: AuthenticatedChatsIndexLazyRoute,
  AuthenticatedHelpCenterIndexLazyRoute: AuthenticatedHelpCenterIndexLazyRoute,
  AuthenticatedTasksIndexLazyRoute: AuthenticatedTasksIndexLazyRoute,
  AuthenticatedUsersIndexLazyRoute: AuthenticatedUsersIndexLazyRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  FaucetRoute: FaucetRoute,
  HomeRoute: HomeRoute,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
  authOtpRoute: authOtpRoute,
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute,
  userAuthUserSignInRoute: userAuthUserSignInRoute,
  CDisplayLinkRoute: CDisplayLinkRoute,
  IDisplayLinkRoute: IDisplayLinkRoute,
  PDisplayLinkRoute: PDisplayLinkRoute,
  authForgotPasswordLazyRoute: authForgotPasswordLazyRoute,
  authSignIn2LazyRoute: authSignIn2LazyRoute,
  errors401LazyRoute: errors401LazyRoute,
  errors403LazyRoute: errors403LazyRoute,
  errors404LazyRoute: errors404LazyRoute,
  errors500LazyRoute: errors500LazyRoute,
  errors503LazyRoute: errors503LazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
